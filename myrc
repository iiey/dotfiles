#!/bin/bash
#script: my functions

#ignore commands which less than two character and others trivial
HISTIGNORE="?:??:l[als]:to *:pwd:clear:exit:&"
#ignoreboth(^space and consecutive duplicates), remove duplicates
HISTCONTROL=ignoreboth:erasedups
#save and reload the history after each command finishes
#this could change index of commands in .bash_history
if [ -z "${PROMPT_COMMAND}" ]; then
    PROMPT_COMMAND="history -a; history -c; history -r;"
else
    PROMPT_COMMAND="history -a; history -c; history -r; ${PROMPT_COMMAND}"
fi

#enable star globbing
[ $BASH_VERSINFO -ge 4 ] && shopt -s globstar


##ALIASES
# up dir
alias 2.='cd ../../'
alias 3.='cd ../../../'
alias 4.='cd ../../../..'

# custom ls
alias l='ls -aCF'
alias la='ls -laAh'     #long list all
alias ll='ls -lFh'      #long list without .

# vim abbreviations
#original
alias v='vim'
alias g='gvim --remote-silent'
#run with fzf
alias vi='vim $(fzf)'
alias gv='gvim --remote-silent $(fzf)'
alias emacs='emacs --no-window-system'

#todo: gerneral cd to switch between source and build
#echo ${PWD%build*} delete all from left of match
#echo ${PWD#*build} delete all from right of match
alias ..='test -d ${PWD%build*}${PWD#*build} && cd ${PWD%build*}${PWD#*build}'

#ranger (exit but stay in ranger current directory)
if type ranger &> /dev/null; then
    alias ranger='ranger --choosedir=$HOME/.rangerdir; LASTDIR=`cat $HOME/.rangerdir`; cd "$LASTDIR"'
fi

#silver search
if type ag &> /dev/null; then
    alias ag="ag --noheading --nobreak -S -p $HOME/.ignore \
        --color-match '01;31' \
        --color-path '36' \
        --color-line-number '32'"
fi

#ripper grep
if type rg &> /dev/null; then
    alias rg="rg --no-heading -S --colors 'path:fg:cyan'"
fi

#ctags
#see $HOME/.ctags for default parameter configuration
if type ctags &> /dev/null; then
    alias tags='ctags -R -f ./.tags .'
fi

#tldr
if command -v tldr &> /dev/null; then
    complete -W "$(tldr 2>/dev/null --list)" tldr
fi

#node & npm
if type node &>/dev/null && type npm  &>/dev/null; then
    [[ $PATH != *"npm-global"* ]] && [[ -d ~/.npm-global ]] && export PATH=${PATH}:${HOME}/.npm-global
    eval "$(npm completion)"
fi

git-ctags() {
    #read project root dir from git
    local dir=$(git rev-parse --show-toplevel)
    #return if not found (in .git or outside cvs)
    [ -z $dir ] && return
    #execute 'git init' if hooks was not copied (from local template)
    #note: directory changing and init are done in subshell (...)
    [ -f "${dir}/.git/hooks/ctags" ] || ( cd $dir && git init )
    #call ctags
    eval "${dir}/.git/hooks/ctags"
}

#tree
if type tree &> /dev/null; then
    alias tree="tree -CAFa -I 'CVS|.git|.svn' --dirsfirst"
fi

#start tmux with colourful xterm and force it assuming term supported 256colour
if type tmux &> /dev/null; then
    alias tmux='TERM=xterm-256color tmux -2'
fi

# remove duplicated entries in PATH
dedupPATH() {
    if [ -n "$PATH" ]; then
        old_PATH=$PATH:; PATH=
        while [ -n "$old_PATH" ]; do
            x=${old_PATH%%:*}       # the first remaining entry
            case $PATH: in
                *:"$x":*) ;;        # already there
                *) PATH=$PATH:$x;;  # not there yet
            esac
            old_PATH=${old_PATH#*:}
        done
        PATH=${PATH#:}; unset old_PATH x
    fi
}


#disable legacy feature of terminal emulator Software Flow Control
#prevent accidentally pressing c-s/c-q
#check interactive shell before enable foreward-search
[[ $- == *i*  ]] && stty -ixon


#mc colorscheme:asterisk, blue, bluemoon, dark, darkened, gotar, nicedark, solarized,...
case "$KONSOLE_PROFILE_NAME" in
    DarkPastels)    mc_color=gotar;;
    Solarized)      mc_color=solarized;;
    *)              mc_color=default;;
esac

#colors for file and folder in terminal
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

#mc colorscheme located unter ~/.local/share/mc/skins
if type mc &> /dev/null; then
    alias mc='mc -S $mc_color'
fi

mc-color() {
    if [ ! "$#" -eq 1 ]
    then
        echo "Usage:mc-color param"
        echo "param: gotar, nicedark, blue, bluemoon, dark, modarin256, solarized, asterisk"
    else
        mc_color="$1"
        mc
    fi
}


# switch term colorscheme
term-color() {
    if [ ! "$#" -eq 1 ]
    then
        echo "Usage: term-color param"
        echo "param: Linux, BlackOnWhite, WhiteOnBlack, BlueOnBlack, GreenOnBlack, DarkPastels, Solarized, SolarizedLight..."
    else
        # fix problem with konsoleprofile in tmux
        if [[ -z "$TMUX" ]]
        then
            konsoleprofile "colors=$1"
        else
            printf '\033Ptmux;\033\033]50;%s\007\033\\' "colors=$1"
        fi
        export KONSOLE_PROFILE_NAME=$1
    fi
}


##DEFAULT OPTION
#use default language (en) as output
export LC_MESSAGES=C

GREP_OPTIONS="-I --color=auto --exclude-dir={.cvs,.git,.svn,.vscode,build} --exclude=*{.jpg,.png,.tags}"
alias grep="grep $GREP_OPTIONS"
alias fgrep="fgrep $GREP_OPTIONS"
alias egrep="egrep $GREP_OPTIONS"
unset GREP_OPTIONS

# using zeal for docsets if dasht exists
if type "dasht" &> /dev/null; then
    export DASHT_DOCSETS_DIR="$HOME/.local/share/Zeal/Zeal/docsets"
fi

# correct previous console command with $fuck
if type "thefuck" &> /dev/null; then
    eval "$(thefuck --alias)"
fi

# correct previous console command with $fuck
if type "tmuxp" &> /dev/null; then
    eval "$(_TMUXP_COMPLETE=source tmuxp)"
fi

# default editor
export EDITOR=vim

#less option
export LESS="-RMj.5"
#use lesspipe to preprocessing input for highlighting code in case term support 256 colors
#FIXME: not interfere with '~/.lessfilter'
if [ "$(tput colors)" -ge 256 ] && type highlight &> /dev/null; then
    export LESSOPEN="| highlight %s -s pablo -O xterm256 --force 2>/dev/null"
fi


##SOURCING
# load fuzzy finder
[ -f $HOME/.fzf.bash ] && source $HOME/.fzf.bash
# load it's command snippets
type "fzf" &> /dev/null && source $HOME/.fzf_cmd

if [ -d "$HOME/.bash-git-prompt" ]; then
    GIT_PROMPT_THEME=Ubuntu_Simple
    GIT_PROMPT_ONLY_IN_REPO=1
    source ~/.bash-git-prompt/gitprompt.sh
fi

# using ccache instead of gcc
[[ $PATH != *"/usr/lib/ccache"* ]] && [[ -d /usr/lib/ccache ]] && export PATH=/usr/lib/ccache/:${PATH}
#enable some extra features
[ -f ~/.autojump/etc/profile.d/autojump.sh ] && source ~/.autojump/etc/profile.d/autojump.sh
[ -f ~/.apparix.bash ] && source ~/.apparix.bash                    #bookmark directories
[ -f ~/.git-completion.bash ] && source ~/.git-completion.bash      #git specific completion
[ -f ~/.tmux-completion.bash ] && source ~/.tmux-completion.bash    #tmux specific completion

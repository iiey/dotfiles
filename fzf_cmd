#!/bin/bash

#check for fzf availability
type -f fzf >/dev/null 2>&1 || return

# Global Setting {{{1
# Use other trigger instead of default **
#export FZF_COMPLETION_TRIGGER="'"

#NOTE: this determines also search program for fzf.vim
#now fzf (w/o pipe) will use ag instead of find
if type ag &> /dev/null; then
    export FZF_DEFAULT_COMMAND='ag -p ~/.gitignore -g ""'
fi

#refer rg over ag
if type rg &> /dev/null; then
    export FZF_DEFAULT_COMMAND='rg --files --hidden'
fi

#show matches in top-down order
export FZF_DEFAULT_OPTS="--reverse \
                         --bind='ctrl-h:half-page-down,ctrl-l:half-page-up'"

#working directory with tree preview
if type tree &> /dev/null; then
    export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -100'"
fi
#1}}}


###############################################################################################
#Files and Folders {{{1

#fuzzy history
#show bash_history w/o duplicates and order preserved
fh() {
    local revshist # return history in reverse order
    if [[ "$OSTYPE" == "darwin"* ]]; then
        revshist="tail -r $HISTFILE"
    else
        revshist="tac $HISTFILE"
    fi

    eval "$revshist" | awk '!x[$0]++' |
    fzf --prompt='(history search): ' --query="$*" --cycle --exact --select-1 --no-sort --height 10% \
                                      --bind="ctrl-x:execute-silent(eval {})+abort"
}

#jump to bookmark of autojump
fj() {
    local dir=$(autojump --stat | sed '/___/,$d' | cut -f 2 |   #use only second column
                sed '/rvm\/copy/d' |                            #ignore rvm_copy
                fzf --query="$1" --select-1 --tac --no-sort --height 10%)
    [ -d "$dir" ] && cd "$dir" || return
}

#goto directory
fcd() {
    command -v tree &>/dev/null && local treeview="tree -L 3 -C {} | head -100"
    local dir=$(find "${1:-.}" -path '*/\.*' -prune -o -type d -not -path "*/build*/*" -print 2> /dev/null |
        fzf +m --preview-window=right --preview="$treeview") &&
        cd "$dir" && ls -l
}

#fuzzy editing with vim
fe() {
    local out key files pipe_highlight term
    term=$([ "$(tput colors)" -ge 256 ] && echo 'xterm256' || echo 'ansi')
    #highlight with ansi output format and line number
    #also force output when filetype not recognized, mute error in case not a file
    command -v highlight &>/dev/null && pipe_highlight="| highlight -s pablo -O ${term} -l --force 2>/dev/null"
    #output multiple lines each should be a single element
    mapfile -t out < <(fzf --query="$1" --multi --select-1 --exit-0 \
                           --header='ctrl-b:buffer, ctrl-s: hsplit, ctrl-v: vsplit' \
                           --preview="head -300 {} ${pipe_highlight}" \
                           --expect=ctrl-b,ctrl-s,ctrl-v)
    #first is expected key (empty if not pressed), from second are selections (-m enable)
    key="${out[0]}"
    files=( "${out[@]:1}" )
    case "$key" in
        ctrl-b) opt= ;;
        ctrl-s) opt="-o" ;;
        ctrl-v) opt="-O" ;;
        *)      opt="-p" ;;     #default open files in tab pages
    esac
    [[ -n "${files[*]}" ]] && vim $opt "${files[@]}"
}
#1}}}


###############################################################################################
# git stuff {{{1

gitcheckout() {
    #check whether a git repo before executing command
    git rev-parse --is-inside-work-tree &> /dev/null || return
    local list response key branch header
    list=$(git branch --all --color -vv; git tag) || return
    mapfile -t response < <(fzf --query="$1" --prompt='checkout: ' \
        --ansi --header="$header" --expect=ctrl-x <<< "$list")
    key="${response[0]}"
    branch=$(perl -pe 's/^\*?\s*(remotes\/[^\/]*\/)?([^ ]+).*/\2/' <<< "${response[1]}")
    git checkout "$branch" || return 1
}

# commits browser
gitlog() {
    git rev-parse --is-inside-work-tree &> /dev/null || return
    local pos   #position of preview window
    [ $(tput cols) -ge 200 ] && pos="right" || pos="down"
    local cmdshow="git show --color=always \"\$(grep -m1 -o '[a-f0-9]\{7\}' <<< {} | head -1 )\""
    fzf --ansi -e --no-sort --tiebreak=index \
        --header='enter:diff, ?:show, ctrl-c:exit, move:ctrl-h/l(page)-d/u(half-page)-j/k(line)' \
        --bind="ctrl-h:page-down,ctrl-l:page-up,ctrl-d:half-page-down,ctrl-u:half-page-up" \
        --bind="?:toggle-preview,enter:execute($cmdshow | less -R)" \
        --preview-window="$pos":hidden:wrap --preview="$cmdshow" \
        < <(git log --graph --color=always --format="%C(auto)%h%d %s %Cgreen(%cr) %Creset<%an>" "$@")
    return 0;
}

#TODO open in vim instead
#add --staged    get diff between index and HEAD
#add HEAD        get diff between working tree vs index vs HEAD
# diffs browser
gitdiff() {
    git rev-parse --is-inside-work-tree &> /dev/null || return
    local cmddiff="git diff --color=always $*"
    difflist=$(git status --short)
    [ -z "$difflist" ] && return
    fzf --ansi --no-sort \
        --header='j/k:down/up, enter:diff, ctrl-o:open, ctrl-x:checkout' \
        --preview-window=down:80%:wrap --preview="eval $cmddiff {2..}" \
        --bind="enter:execute(eval $cmddiff {2..} | less -R)" \
        --bind="ctrl-o:execute(gvim --remote-silent {2..})" \
        --bind="ctrl-x:execute(git checkout {2..})" \
        --bind="j:down,k:up" \
        <<< "$difflist"
    return 0;
}

# stash list show
gitstash() {
    git rev-parse --is-inside-work-tree &> /dev/null || return
    local out opt key idx
    stashlist=$(git stash list --color=always --pretty='%C(yellow)%gd %>(14)%Cgreen%ci%Creset %gs')
    [ -z "$stashlist" ] && return
    #map two lines into a two-elements array
    mapfile -t out < <(fzf --ansi --no-sort \
        --header='enter:show, ctrl-d:diff, ctrl-o:pop, ctrl-y:apply, ctrl-x:drop' \
        --preview='git stash show --color=always -p $(cut -d" " -f1 <<< {}) | head -'$LINES \
        --preview-window=down:80% --reverse \
        --bind='enter:execute(git stash show --color=always -p $(cut -d" " -f1 <<< {}) | less -r > /dev/tty)' \
        --bind='ctrl-d:execute(git diff --color=always $(cut -d" " -f1 <<< {}) | less -r > /dev/tty)' \
        --expect=ctrl-o,ctrl-y,ctrl-x <<< "$stashlist")
    #fzf returns key (first line) result (second) if '--expect' specified (without --print-query)
    key="${out[0]}"
    idx="${out[1]%% *}"         #remove everything from the end till space (longest match)
    case "$key" in
        ctrl-o) opt="pop" ;;
        ctrl-x) opt="drop" ;;
        ctrl-y) opt="apply" ;;
    esac
    [ -n "$opt" ] && [ -n "$idx" ] && git stash "$opt" "$idx";
}

#1}}}


###############################################################################################
#other commands {{{1

#kill tmux session by selecting from list
tkill() {
    type tmux &> /dev/null  || return
    local sessions
    #list-session with (only session_name) format
    mapfile -t sessions < <(tmux ls -F '#S' | fzf -m)
    for elem in "${sessions[@]}"; do
        tmux kill-session -t "$elem" && echo "killed session: '$elem'"
    done
}
#1}}}


###############################################################################################
#key bindings {{{1
if [[ $- == *i* ]]; then
    #overwrite default keybind c-r
    bind '"\er": redraw-current-line'
    bind '"\C-r": "$(fh)\e\C-e\er"'

    #git things
    #use -x to execute a shell-comand by bash
    bind -x '"\C-g\C-l": "gitlog"'
    bind -x '"\C-g\C-d": "gitdiff"'
    bind -x '"\C-g\C-s": "gitstash"'
fi
#1}}}

# vim:foldmethod=marker:foldlevel=1

#!/bin/bash

# Global Setting {{{1
#feed fzf with ag instead of find command
#now fzf (w/o pipe) will use ag instead of find
if type ag &> /dev/null; then
    export FZF_DEFAULT_COMMAND='ag -g ""'
fi

#show matches in top-down order
#cycle through when reaching top/bottom of list
export FZF_DEFAULT_OPTS="--reverse"

if type tree &> /dev/null; then
    export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"
fi
#1}}}


###############################################################################################
#Files and Folders {{{1

#fuzzy history
#   show bash_history w/o duplicates and order preserved
#   overwrite default keybind c-r
fh() {
    awk '!x[$0]++' $HISTFILE |
    fzf --prompt='history search: ' --cycle --exact --no-sort --tac --height 40%
}
bind '"\er": redraw-current-line'
bind '"\C-r": "$(fh)\e\C-e\er"'

#jump to bookmark of autojump
fj() {
    local dir=$(autojump --stat | sed '/___/,$d' | cut -f 2 |
                fzf --query="$1" --exact --select-1)
    [ -d "$dir" ] && cd "$dir"
}

#cd directory
fd() {
    local dir=$(find ${1:-.} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m) &&
        cd "$dir"
}

#open the selected file with the default editor (prefer vim)
fe() {
    local files
    IFS=$'\n' files=($(fzf --query="$1" --multi --select-1 --exit-0 --preview="head -$LINES {}"))
    #TODO ctrl-t:open files in tabs, ctrl-w: open files in windows
    [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}
#1}}}

#redmine ticket searcher
red() {
    local ticket=$(redmine --all |
                    fzf --query="$1" --exit-0 --select-1 \
                        --preview-window=down:40% --preview="redmine --desc {1}"|
                    awk '{print $1}')
                    #sed 's/^\s*//' | cut -d ' ' -f1)
    if echo "$ticket" | grep -qE '^[[:digit:]]+$'; then
        redmine --desc "$ticket"
    fi
}

###############################################################################################
# git stuff {{{1

git_checkout() {
    local list response key branch header
    list=$(git branch --all --color -vv; git tag) || return 1
    mapfile -t response < <(fzf --prompt='checkout: ' \
        --ansi --header="$header" --expect=ctrl-x <<< "$list")
    key="${response[0]}"
    branch=$(perl -pe 's/^\*?\s*(remotes\/[^\/]*\/)?([^ ]+).*/\2/' <<< "${response[1]}")
    git checkout "$branch" || return 1
}

# a git commit browser
#   ctrl-w: show preview window
#   enter:  open commit diff
#   ctrl-c: exit
gitlog() {
    local cmdshow="git show --color=always \"\$(grep -m1 -o '[a-f0-9]\{7\}' <<< {})\""
    fzf --ansi -e --no-sort --tiebreak=index \
        --bind="ctrl-w:toggle-preview,enter:execute($cmdshow | less -R)" \
        --preview-window=down:hidden --preview="$cmdshow" \
        < <(git log --graph --color=always --format="%C(auto)%h%d %s %Cgreen(%cr) %Creset<%an>" "$@")
    return 0;
}

#TODO check cases where status return not only diff files
#TODO open in vim instead
gitstatus() {
    local cmddiff="git diff --color=always"
    git status -sb | sed '/##/d' |
    fzf --ansi --no-sort \
        --preview-window=right:70% --preview="$cmddiff {2}" \
        --bind="enter:execute($cmddiff {2} | less -R)" \
        --bind="ctrl-o:execute(gvim {2})" \
        --bind="j:down,k:up"
    return 0;
}
#1}}}

# vim:foldmethod=marker:foldlevel=1

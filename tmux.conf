##############################
### KEY BINDING
##############################
# PREFIX is backtick
set -g prefix `
# rotate prefix 'backtick' with C-a when needed
bind C-a set -g prefix C-a
bind C-b set -g prefix `
# double-tap prefix key to switch between the last two windows
bind ` last-window
bind a send-prefix


# use prefix + r to reload tmux.conf
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# clear screen and scrollback buffer
#bind y send-keys "clear"\; send-keys "Enter"\; clear-history
bind y send-keys C-l \; clear-history

# toggle window activity monitor
bind m setw monitor-activity


# POPUP (3.2+)
# hide/show(create) popup
bind u if-shell -F '#{==:#{session_name},popup}' { detach-client } {
    set -gF '@last_session_name' '#S'
    popup -d '#{pane_current_path}' -xC -yC -w80% -h80% -E 'tmux new -A -s popup'
}
# attach popup to current session
bind ! if-shell -F '#{!=:#{session_name},popup}' { break-pane } {
    run-shell 'bash -c "tmux break-pane -s popup -t \"$(tmux show -gvq '@last_session_name'):\""'
}
# attach popup w/o losing focus
bind @ if-shell -F '#{!=:#{session_name},popup}' { break-pane -d } {
    run-shell 'bash -c "tmux break-pane -d -s popup -t \"$(tmux show -gvq '@last_session_name'):\""'
}


### NAVIGATION vi-like
# use vi-style in copy-mode
set -g mode-keys vi
# vi-like pane navigation (prefix + key)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# vi-like pane resizing (prefix + Ctrl+key)
# allow to press other key without bind-key within 1000ms (default 500ms)
set -g repeat-time 1000
bind -r C-h resize-pane -L 3
bind -r C-j resize-pane -D 3
bind -r C-k resize-pane -U 3
bind -r C-l resize-pane -R 3


# SPLIT
#note: pane created at home directory w/o 'pane_current_path'
# vertical
bind '-' split-window -v -c '#{pane_current_path}'
bind '\' split-window -h -c '#{pane_current_path}'
bind v split-window -p 20 -v -c '#{pane_current_path}'
bind c new-window -c '#{pane_current_path}'
#bind C new-window -a


# scrolling
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" \
    "if -Ft= '#{pane_in_mode}' 'send-keys -M' \
    'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M


##############################
### SETTING
##############################
###Config which depend on tmux version
#NOTE: tmux not backward compatibility (tmux#1732)

# create new env-var TMUX_VERSION for later uses
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | grep -Eo '[0-9]\.[0-9]+')"

# version 2.1 "mouse" replaced the 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
    "set -g mouse on"

# version 2.2: UTF8 is autodetected, but errors if set without quite flag '-q'
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
    "set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on"

# version 2.4: bind-key syntax changed -- select/copy
# 'copy-pipe' stores selected text in tmux buffer same as 'copy-selection'
# additionally pipes it to given command to save in system clipboard
# note: there're also commands 'copy..-and-cancel' to exit mode after copy
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' " \
    bind -t vi-copy v begin-selection; \
    bind -t vi-copy C-v rectangle-toggle; \
    bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard >/dev/null'"
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' " \
    bind -T copy-mode-vi v send -X begin-selection; \
    bind -T copy-mode-vi C-v send -X rectangle-toggle; \
    bind -T copy-mode-vi y send -X copy-pipe 'xclip -selection clipboard -in'"


###Update enviroment variables
#append these env-vars if only not done
if-shell -b '[ -z "$(tmux show-environment | grep PATH)" ]' " \
    set -ga update-environment 'LD_LIBRARY_PATH PATH \
                                DISPLAY \
                                KONSOLE_PROFILE_NAME \
                                KONSOLE_DBUS_WINDOW \
                                KONSOLE_DBUS_SESSION'"


# use emacs key bindings in command prompt (prefix + :)
set -g status-keys emacs

# fix ctrl-l not clear screen (#1235)
set -g default-terminal "screen-256color"
set -as terminal-overrides ',*:indn@'

# set window start index at 1 instead 0
set -g base-index 1

# keep more history
set -g history-limit 10000

# tell tmux to pass some specific keys correctly through terminal
set-window-option -g xterm-keys on

# duration of message display
# increase via command :set display-time 3000
set -g display-time 1000

# don't use ESC-key combinations in any terminal program.
# so no need to wait for a second key after ESC was pressed.
set -sg escape-time 0

# focus events enabled for terminals that support them
set -g focus-events on


##############################
### LAYOUT default minimal
##############################
# statusbar white text in black background (base02)
set -g status-style fg=colour15,bg=colour235

# LEFT SECTION
# allow display of longer window names
set -g status-left-length 100
set -g status-left "#S "

# RIGHT SECTION (cyan bold)
set -g status-right "#[fg=colour06,bold] < %Y-%m-%d | %H:%M | #h "

# WINDOWS TITLE
set -g window-status-format " #I #W "
# active window: bright cyan bold
set -g window-status-current-format "#[fg=colour14,bold] [#I #W] "

# PANE BORDER
set -g pane-border-style fg=colour235            #base02
set -g pane-active-border-style fg=colour240     #base01
# MESSAGE TEXT
set -g message-style fg=colour14,bg=colour235


#### COLORSCHEME
# check file existence and sourcing theme created by tmuxline.vim
# loaded theme overrides default layout
#TMUX_THEME='$HOME/.config/tmux/zenburn'
#if-shell "test -f $TMUX_THEME" "source $TMUX_THEME"
#command show color palette
#for i in {0..255} ; do printf "\x1b[38;5;${i}mcolour${i}\n"; done


#### PLUGIN MANAGER
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'

# init (keep this line at the bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
